=== Zweiter Aufgabenblock (identisch für alle Studierenden) ===

Sie haben jetzt gezeigt, dass Sie einfache Arbeiten mit einem Git-Repository beherrschen.
Als Teil der letzten Aufgabe sollten Sie beschreiben, was Ihre Anwendung tun soll, also was für Funktionalitäten Ihre Anwendung bieten soll.
Wenn Sie hier nichts angegeben haben, dann werde ich Ihnen einen Vorschlag hochladen, mit dem Sie weiterarbeiten können.
In der Veranstaltung haben Sie außerdem gelernt, was Markup Languages sind.

Die nächste Aufgabe besteht aus den folgenden Teilen:

1.) Lesen Sie mein Feedback durch und setzen Sie die beschriebenen Aufgaben um.

Für die folgende Aufgabe sollten Sie mindestens eine halbe Stunde investieren. Zwei Stunden wäre aber etwas zu viel des guten.
Bearbeiten Sie die Aufgaben 2. und 3. bitte innerhalb von 48 Stunden, weil andere Studierende davon abhängen, dass Sie sie beendet haben.
Bearbeiten Sie die Aufgaben auf jeden Fall in der vorgegebenen Reihenfolge.
Und bearbeiten Sie eine Aufgabe nicht nachträglich nochmal. (Wenn Sie also z.B. Aufgabe 3. bearbeiten, dann ändern Sie bitte nichts an Aufgabe 1. nachträglich ab. Dafür wird später noch genug Zeit sein.)

2.) Bennen Sie die strukturellen Elemente, aus denen Ihre Anwendung bestehen soll.
Es ist dabei egal, ob es diese Elemente in HTML gibt.
Es ist auch egal, ob Sie sich schon in HTML eingearbeitet haben.
Wichtig ist nur, dass Sie die strukturellen Elemente benennen, aus der die Anwendung bestehen soll.
Speichern Sie diese Aufstellung als HTML-Kommentar in einer Datei mit dem Namen

strukt.html

, die Sie in Ihrem Repository abspeichern. Wichtig: Die Datei soll nicht im Unterverzeichnis Dokumentation des Repositories gespeichert werden, weil sie die Basis für das erste HTML-Dokument werden wird.

Wenn Sie noch unsicher sind: Strukturelle Elemente können alles mögliche sein:
- Tabellen
- Listen
- Schaltflächen
- Textfelder
- Bildbereiche
- Hintergrundmusik
- Absätze
- ...

In anderen Worten: Ein strukturelles Element ist etwas, das ein abgegrenzter Teil der Anwendung ist.
Notieren Sie kurz, welche Funktion jedes der von Ihnen genannten Elemente haben soll.

Hier einige Beispiele:
- Schaltfläche (Nutzer können per Klick bestätigen, dass eine Eingabe abgeschickt werden soll.)
- Textfeld für Namen (Nutzer können Ihren Nachnamen eintragen.)
- Log-In-Maske (Bereich, in dem Nutzer sich einloggen können.)
- - Teile der Log-In-Maske:
- - Textfeld für Username
- - Textfeld, das die Eingabe nicht anzeigt, fürs Passwort
- Tabelle, 7 x 5 Felder (Jedes Feld soll ein Bild anzeigen, das ein Feld des Spielbretts ist. Wenn Nutzer ein Feld anwählen, soll ein Menü erscheinen.)
- - Menü für jedes Feld der Tabelle mit Texteinträgen (Eintrag für "Gebäude abreißen", "Feld kaufen")
- Hintergrundbild (Hier sollen einzelne Bilder als Diashow eingeblendet werden.)
- Werbebanner
- Schaltfläche für die Maskierung von NSFW (NSFW = Not safe for work)(NutzerInnen können über diese Schaltfläche eine andere Anwendung in der Vordergrund einblenden lassen, damit der Chef nicht sieht, dass sie gerade spielen.)

3.) Schauen Sie jetzt in der Liste der Repositories (nicht in der Tabelle der Accounts) nach, welche zehn Repositories vor und nach Ihrem Repository aufgeführt sind und geben Sie den Besitzern dieser Repositories Zugriffsrechte auf Ihr Repository.

Bsp.: Sie haben das Repository BerndStromberg. Dann folgen die zehn Repositories der Nutzer BlackWolf63, Cantinaband, CaptainWeasle, ColePfeiffer, CurvLietzau,
DangerDulf, dnbdel, Domsche, Eldinox und Eupuco und vor Ihnen gibt es die fünf Repositories der Nutzer 2238867, amelie-beh, Anger21, anita1997 und Asphalon. all diesen Accounts geben Sie jetzt Zugriffsrechte auf Ihr Repository, so wie Sie das schon für mich getan haben. Wenn Sie, wie BerndStrommberg zu weit am Anfang der Liste stehen (hier gibt es ja nur fünf andere Accounts bis zum Anfang der Liste), dann geben Sie zusätzlich noch den Besitzern der letzten fünf Repositories Zugriffsrechte. Es sollten insgesamt 20 Accounts Zugriffsrecht haben.

Für die nächsten zwei Aufgaben sollten Sie pro Repository zwischen zehn Minuten und einer Stunde aufwenden. Weniger ist zu wenig und mehr ist zu viel.
Beachten Sie dabei bitte, dass Sie hier letzten Endes Kritik an der Arbeit eines/einer anderen üben und das einige von Ihnen noch nie programmiert haben. Arbeiten Sie deshalb bitte daran, alles, was Sie ergänzen so neutral und höflich wie möglich zu formulieren, denn Unwissenheit und mangelndes Verständnis fürs Programmieren sind eben nicht das selbe wie Dummheit oder Faulheit.

Bitte erledigen Sie diese Aufgaben innerhalb der nächsten sieben Tage.

4.) Als nächstes greifen Sie auf die nach Ihrem Repository nachfolgenden fünf Repositories zu und bearbeiten hier die folgende Aufgabe. (Hier hängen Sie also davon ab, dass andere Kommilitonen Aufgabe 3. erledigt haben.) 

Lesen Sie sich die Projektidee durch und machen Sie sich ähnlich wie bei 2. einfache Stichpunkte über strukturelle Elemente, die Sie bei dieser Projektidee sinnvoll finden. (Hier erstmal nur Stichpunkte, Details arbeiten Sie unter 5. aus.)

5.) Öffnen Sie jetzt die Datei strukt.html des Repositories, das Sie gerade bearbeiten. Ergänzen Sie Elemente, die Sie unter 4. notiert haben und die noch nicht eingetragen sind in der unter 2. beschriebenen Form.

Abschließender Hinweis zu 4. und 5.:

Auch wenn das nirgends explizit steht sollen Sie Änderungen in das Repository pushen, aus dem sie die Datei strukt.html gepullt haben.
Es ist dabei sehr wahrscheinlich, dass Sie (vielleicht auch erst später während der Projektbearbeitung) einen merge durchführen müssen. Wenn Sie sich noch nicht angesehen haben, wie das geht, dann tun Sie es jetzt.

Viele Grüße,
Markus Alpers



&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&& Nächste Aufgabe &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&



======================================================
=== Aufgabe 3, identisch für alle, die soweit sind ===
======================================================

ACHTUNG! Bearbeiten Sie diese Aufgaben dann und NUR DANN, wenn ich Sie in Ihr Repository geladen habe.

Sie haben jetzt eine Grundstruktur für Ihre Anwendung ausgearbeitet. Genauer gesagt haben Sie die Elemente der Struktur Ihrer Anwendung ausgearbeitet. Jetzt geht es um die folgenden Aufgaben, die Sie bitte wieder alleine bearbeiten. (Bitte werfen Sie außerdem in Projekte anderer Studierender, wie das schon bei der letzten Aufgabe der Fall war. Es ist durchaus möglich, dass die nochmal zurück zur ersten Aufgabe gehen und das Projekt massiv ändern mussten. In dem Fall unterstützen Sie dann bitte wieder mit Ergänzungen zur strukt.html.)

===================================
== (1) Strukturierung von Ansichten
===================================

Für die folgende Aufgabe gilt: Arbeiten Sie hier mit der Datei strukt.html weiter.
Lassen Sie die bisher erstellen Notizen zu jedem strukturellen Element am Anfang stehen und nummerieren Sie sie fortlaufend. Wenn Sie weitere Element hinzufügen, dann ändern Sie keinesfalls die bisherige Nummerierung ab, sondern fügen Sie neue Elemente ans Ende der fortlaufenden Nummerierung an. Sie können jedoch (um deutlich zu machen, das später eine Ergänzung folgt) kleine Hinweise verfassen.

Hier ein Beispiel: Bislang haben Sie 97 strukturelle Elemente definiert:

-01- Interaktionsmöglichkeit / laufen nach links
-02- Interaktionsmöglichkeit / laufen nach rechts
-03- Textfeld / Eingabe Nutzername
...
-97- Schaltfläche / Submit

Jetzt fällt Ihnen ein, dass Sie eine Interaktion "springen" gut wäre. Fügen Sie die jetzt nicht als Nr. 3 ein, sondern ans Ende. Wenn Sie sicher gehen wollen, können Sie einen Kommentar hinter dem strukturellen Element einfügen, zu dem es Ihrer Ansicht nach am besten passt.)

-01- Interaktionsmöglichkeit / Spielfigur: Laufen nach links
-02- Interaktionsmöglichkeit / Spielfigur: Laufen nach rechts (Ergänzung: springen siehe -98-)
-03- Textfeld / Eingabe Nutzername
...
-97- Schaltfläche / Submit
-98- Interaktionsmöglichkeit / Spielfigur: springt

=======================
== (1.1) Gruppen bilden
=======================

Nehmen Sie nun Ihre strukturellen Elemente und stellen Sie jeweils diejenigen zusammen, die ein sinnvolles Ganzes ergeben. Ein einfaches Beispiel dafür wäre eine Log-In-Maske: Darin hätten Sie ein Eingabefeld für den Username und das Passwort, aber ggf. auch weitere Elemente (denken Sie an so etwas wie ein Captcha, oder eine Eingabefläche, in der Nutzer ein Muster eingeben müssen anstelle eines Passworts.)

Nummerieren Sie die resultierenden Gruppen bitte mit römischen Ziffern.

Denken Sie dabei daran, dass es Elemente geben wird, die in mehreren Gruppen sinnvoll sein. Z.B. kann die Anzeige des Username nach dem Log-In an mehreren Stellen genutzt werden. Deswegen ist es wichtig, dass Sie die Elemente nummerieren und Ihnen einen kurzen Namen geben. Der Name ist gleichzeitig eine Vorbereitung auf die Verwendung durch PHP. Die Nummer ist nur da, weil es in aller Regel einfacher ist, nach Zahlen zu sortieren als alphbetisch nach Namen.

=========================
== (1.2) Ansichten bilden
=========================

Gruppieren Sie nun die erhaltenen Gruppen so zusammen, dass Sie Ansichten erhalten. Mit einer Ansicht ist hier gemeint, dass es sich um eine Ansammlung von strukturellen Elementen handelt, die gleichzeitig angezeigt werden. Sie werden unter Umständen feststellen, dass Ihre Anwendung nur eine einzige Ansicht hat, aber das ist im Moment in Ordnung. Ggf. werde ich Ihnen Hinweise geben, was für Ansichten Sie noch erstellen sollten.

Auch die Ansichten sollten einen Namen bekommen. Hier brauchen wir aber keine Zahlen. Benennen Sie die Ansichten als 
-----------------
--- view_name ---
-----------------
, wobei name der Name ist, den Sie der Ansicht geben wollen. (Tipp: Wenn bei Ihnen eines oder mehrere Elemente tatsächlich view_name... heißen, haben Sie das missverstanden.) Es sollte sich dabei um einen Namen handeln, der ohne Internationalisierung auf jedem Rechner angezeigt werden kann. (Ersetzen Sie Umlaute ggf. durch mehrere Buchstaben.)

Unterhalb notieren Sie dann ohne Hinweis auf die Anordnung die strukturellen Elemente.

Prüfen Sie erst am Ende, welche der Ansichten als allererstes angezeigt werden soll und bennen Sie die in view_index um.

====================
== (2.) Erstes HTML
====================

Erstellen Sie jetzt für jede view_name ein HTML-Dokument mit dem Namen einer Ansicht.
Programmieren Sie darin die Container, die den strukturellen Elementen entsprechen und tragen Sie jeweils als kurzen Kommentar ein, welcher Inhalt/welche Funktionalität usw. mit diesem Container verbunden werden soll. Erweitern Sie jedes Dokument so, dass es internationalisiert und lokalisiert ist. Nutzen Sie ausschließlich Container, die für HTML5 vorgesehen sind. 

Wenn Sie sich bereits in HTML4.01 eingearbeitet hatte: Im Skript können Sie anhand der Beispiele leicht prüfen, ob Ihre Programmierung passt. Ich kann Ihnen jedoch sagen, dass die meisten HTML4.01-Programmierer beim Umstieg auf Version 5 vergessen, dass Anführungszeichen weitgehend überflüssig sind und <div>-Container nicht ohne Grund nur ganz kurz in der Veranstaltung behandelt wurden: In 19 von 20 Fällen wir jetzt ein anderer Container für die gleiche Aufgabe verwendet. Auch das style-Attribut hat in HTML5 so gut wie nichts mehr verloren.

-- Bsp.: --
<input id=username name=username><!-- Eingabe des Nutzernamens -->
<img><!-- Hier das Logo der Seite einfügen -->

-- Wichtig: --
Wenn Sie das Gefühl haben, Sie könnten eine Struktur z.B. mit einer for-Schleife ganz schnell programmieren, dann schreiben Sie diese Schleife (oder was auch immer Sie aus Java/PHP kennen) in einen <?php ?> Container. Es ist nicht wichtig, ob die Syntax und Semantik stimmt. Darum kümmern wir uns später. Wichtig ist nur, dass Sie sich keine unnötige Arbeit machen.

-- Ebenfalls wichtig: --
Erstellen Sie ein Verzeichnis Gruppen_de in Ihrem Repository.

Erstellen Sie für jede Gruppe, die Sie bei Schritt (1.1) gebildet haben und die in mehreren Ansichten vorkommt ein eigenständiges Dokument, das Sie unter dem Namen der Gruppe (ohne Nummer) im Verzeichnis Gruppen_de speichern. Nutzen Sie <?php include(url zur datei) ?>, um die entsprechenden Codefragmente an allen Stellen einzubinden, wo das nötig ist.

=================================
== (3.) Erste Schritte hin zu PHP
=================================

Sie haben in Programmieren 1 grundlegende imperative Programmiermethoden kennen gelernt. Und auch wenn die Syntax in PHP anders ist als in Java, können Sie doch vieles mit wenig Anpassung weiterverwenden, müssen "nur" daran denken, dass PHP dynamisch typisiert ist.

Jetzt, wo Sie eine erste Struktur in HTML geschaffen haben, Formulare und interaktive Elemente programmiert haben, können Sie dazu übergehen, den Programmablauf bzw. die Logik bzw. die Interaktion zu programmieren. Und auch wenn das im Moment natürlich nicht funktionieren wird, machen Sie jetzt bitte folgendes: 

Erstellen Sie jetzt eine Datei mit dem Namen php_code.php im Repository im Wurzelverzeichnis (also da, wo auch die HTML-Dokumente liegen). Ggf. werden Sie später zusätzliche PHP-Dateien erstellen, das müssen wir noch sehen.

Wenn Sie mehrere Formulare entworfen haben, dann erstellen Sie ein Verzeichnis mit dem Namen Formulare im Repository und speichern Sie dort für jedes Formular (das ja eine Gruppe ist) unter dem Namen form_eval_gruppenname.php

Und nun programmieren Sie so ähnlich wie Sie in Java programmieren würden. Wenn Sie sich nicht sicher sind, dann programmieren Sie genauso, als wenn es Java wäre; die PHP-Syntax lernen Sie ja in der Veranstaltung kennen und können dann den Code nach und nach anpassen.

Wenn Sie nicht wissen, wie Sie etwas programmieren sollen (z.B. weil Sie keine Idee haben, wie Sie das Bild einer Schaltfläche per PHP austauschen sollen), dann tragen Sie das als Kommentar in den PHP/Java-Code ein.

Denken Sie bitte daran, dass Variablen in PHP mit einem $ am Anfang geschrieben werden. Die Java-Variable summe wird also in PHP $summe notiert. Benutzen Sie für eigenen Variablen bitte vorrangig Kleinbuchstaben.

Wenn Sie ein Formular auswerten, dann erzeugt PHP einen Dictionary mit dem Namen $POST, dessen Einträge die Namen der Formularfelder sind. Wenn Sie nicht wissen, was ein Dictionary ist: Das ist etwas, das so ähnlich wie ein Array funktioniert, nur dass die Einträge nicht nummeriert sind, sondern mit beliebigen Variablen bezeichnet werden können.

Nehmen wir an, Sie hätten im HTML-Formular ein Feld mit dem Namen username und eines mit dem Namen password erstellt. Dann können Sie im zugehörigen PHP-Formular die Eingaben von Nutzern durch $POST[$username] bzw. $POST[$password] auslesen. Aber keine Sorge, wenn Ihnen das jetzt noch nicht ganz klar ist, warten Sie die nächsten zwei Veranstaltungen ab, dann werden wir das besprechen.

===============================

Wie gesagt sind das alles Aufgaben, die Sie wieder alleine bearbeiten sollen.
Bei der nächsten Aufgabe werden Sie dann wieder an Projekten anderer Studierender arbeiten und so ein weiters Mal die geforderte Gruppenarbeit im Projekt leisten.

Viele Grüße und viel Erfolg,
Markus Alpers